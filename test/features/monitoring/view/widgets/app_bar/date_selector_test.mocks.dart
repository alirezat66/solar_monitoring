// Mocks generated by Mockito 5.4.4 from annotations
// in solar_monitoring/test/features/monitoring/view/widgets/app_bar/date_selector_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:monitoring_chart/monitoring_chart.dart' as _i4;
import 'package:solar_monitoring/core/bloc/app_bloc.dart' as _i2;
import 'package:solar_monitoring/features/monitoring/cubit/monitoring_state_model.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMonitoringState_0 extends _i1.SmartFake
    implements _i2.MonitoringState {
  _FakeMonitoringState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_1 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MonitoringCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMonitoringCubit extends _i1.Mock implements _i2.MonitoringCubit {
  MockMonitoringCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MonitoringState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeMonitoringState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.MonitoringState);

  @override
  _i3.Stream<_i2.MonitoringState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.MonitoringState>.empty(),
      ) as _i3.Stream<_i2.MonitoringState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> loadData(
    DateTime? date, {
    bool? isForceRefresh = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadData,
          [date],
          {#isForceRefresh: isForceRefresh},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.MonitoringState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.MonitoringState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [MonitoringState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockMonitoringState extends _i1.Mock implements _i2.MonitoringState {
  MockMonitoringState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<_i4.EnergyType, _i5.MonitoringStateModel> get energyStates =>
      (super.noSuchMethod(
        Invocation.getter(#energyStates),
        returnValue: <_i4.EnergyType, _i5.MonitoringStateModel>{},
      ) as Map<_i4.EnergyType, _i5.MonitoringStateModel>);

  @override
  DateTime get selectedDate => (super.noSuchMethod(
        Invocation.getter(#selectedDate),
        returnValue: _FakeDateTime_1(
          this,
          Invocation.getter(#selectedDate),
        ),
      ) as DateTime);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);

  @override
  _i2.MonitoringState copyWith({
    Map<_i4.EnergyType, _i5.MonitoringStateModel>? energyStates,
    DateTime? selectedDate,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #energyStates: energyStates,
            #selectedDate: selectedDate,
          },
        ),
        returnValue: _FakeMonitoringState_0(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #energyStates: energyStates,
              #selectedDate: selectedDate,
            },
          ),
        ),
      ) as _i2.MonitoringState);

  @override
  _i2.MonitoringState toLoadingState() => (super.noSuchMethod(
        Invocation.method(
          #toLoadingState,
          [],
        ),
        returnValue: _FakeMonitoringState_0(
          this,
          Invocation.method(
            #toLoadingState,
            [],
          ),
        ),
      ) as _i2.MonitoringState);
}
